<?php

/**
 * DaystatTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class DaystatTable extends Doctrine_Table
{
  /**
   * Returns an instance of this class.
   *
   * @return object DaystatTable
   */
  public static function getInstance()
  {
    return Doctrine_Core::getTable('Daystat');
  }

  public static function createOrAdd($mins, $day, $task_id){
    $daystat = Doctrine_Query::create()->
      from('Daystat s')->
      where('s.day = ?', $day->format("Y-m-d"))->
      addWhere('s.task_id = ?', $task_id)->
      fetchOne();
    if ($daystat){
      $daystat['minutes'] += $mins;
      $daystat->save();
    }else{
      $daystat = new Daystat();
      $daystat['minutes'] = $mins;
      $daystat['day'] = $day->format("Y-m-d");
      $daystat['task_id'] = $task_id;
      $daystat->save();
    }
  }
  public static function computeUow($uow)
  {
    $start = new DateTime($uow['start_time']);
    $current = $start;
    $end   = new DateTime($uow['end_time']);
    $ended = False;
    while(!$ended){
      if ($current > $end){
        break;
      }
      $nextday = new DateTime(date("Y-m-d H:i:s", strtotime($current->format("Y-m-d")) + 60*60*24));
      if ($nextday > $end){
        $interval = $current->diff($end);
        DaystatTable::createOrAdd($interval->format('%i')+$interval->format('%h')*60, $current, $uow['task_id']);
        $ended = True;
      }else{
        $interval = $current->diff($nextday);
        DaystatTable::createOrAdd($interval->format('%d')*1400+$interval->format('%i')+$interval->format('%h')*60, $current, $uow['task_id']);
      }
      $current = $nextday;
    }
  }
  public static function getFromDate($user_id, $from){
    $daystat = Doctrine_Query::create()->
      from('Daystat s')->
      leftJoin('s.Task t')->
      leftJoin('t.TaskGroup g')->
      where('g.user_id = ?', $user_id)->
      addWhere('s.day >= ?', $from)->
      fetchArray();
    return $daystat;
  }

  public static function getThisWeek($user_id){
    return DaystatTable::getFromDate($user_id, date('Y-m-d',(time()-date('w', time())*60*60*24)));
  }
  public static function getThisMonth($user_id){
    return DaystatTable::getFromDate($user_id, date('Y-m-',time()).'1');
  }
  public static function getThisDay($user_id){
    return DaystatTable::getFromDate($user_id, date('Y-m-d',time()));
  }
}
